{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["ReactEditor","divRef","React","createRef","editor","this","update","current","destroy","EditorJS","holder","tools","header","class","Header","inlineToolbar","list","List","paragraph","Paragraph","simpleImage","SimpleImage","data","time","blocks","type","url","caption","withBorder","withBackground","stretched","text","level","style","items","version","Fragment","ref","onClick","save","then","console","log","PureComponent","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4WASMA,E,2MACJC,OAASC,IAAMC,Y,EACfC,OAA0B,K,mFAGxBC,KAAKC,W,2CAILD,KAAKC,W,+BAIAD,KAAKJ,OAAOM,UAGbF,KAAKD,QACPC,KAAKD,OAAOI,UAEdH,KAAKD,OAAS,IAAIK,IAAS,CACzBC,OAAQL,KAAKJ,OAAOM,QACpBI,MAAO,CACLC,OAAQ,CACNC,MAAOC,IACPC,eAAe,GAEjBC,KAAM,CACJH,MAAOI,IACPF,eAAe,GAEjBG,UAAW,CACTL,MAAOM,IACPJ,eAAe,GAEjBK,YAAa,CACXP,MAAOQ,IACPN,eAAe,IAGnBO,KAAM,CACJC,KAAM,cACNC,OAAQ,CACN,CACEC,KAAM,cACNH,KAAM,CACJI,IAAK,YACLC,QAAS,GACTC,YAAY,EACZC,gBAAgB,EAChBC,WAAW,IAGf,CACEL,KAAM,SACNH,KAAM,CACJS,KAAM,8CACNC,MAAO,IAGX,CACEP,KAAM,YACNH,KAAM,CACJS,KAAM,2DAGV,CACEN,KAAM,YACNH,KAAM,CACJS,KAAM,8CAGV,CACEN,KAAM,SACNH,KAAM,CACJS,KAAM,YACNC,MAAO,IAGX,CACEP,KAAM,YACNH,KAAM,CACJS,KAAM,6CAGV,CACEN,KAAM,OACNH,KAAM,CACJW,MAAO,YACPC,MAAO,CACL,gNACA,mGACA,0IAIN,CACET,KAAM,SACNH,KAAM,CACJS,KAAM,SACNC,MAAO,IAGX,CACEP,KAAM,OACNH,KAAM,CACJW,MAAO,UACPC,MAAO,CACL,+DACA,wEACA,qFACA,gCAIN,CACET,KAAM,SACNH,KAAM,CACJS,KAAM,0BACNC,MAAO,IAGX,CACEP,KAAM,YACNH,KAAM,CACJS,KACE,uIAIRI,QAAS,e,+BAKL,IAAD,OACP,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,IAAKhC,KAAKJ,SACf,4BACEqC,QAAS,WACP,EAAKlC,QAAU,EAAKA,OAAOmC,OAAOC,KAAKC,QAAQC,OAFnD,a,GA1IkBxC,IAAMyC,eA8JjBC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCtJcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.69c1d36c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nimport EditorJS from \"@editorjs/editorjs\";\nimport Header from \"@editorjs/header\";\nimport List from \"@editorjs/list\";\nimport Paragraph from \"@editorjs/paragraph\";\nimport SimpleImage from \"@editorjs/simple-image\";\n\nclass ReactEditor extends React.PureComponent {\n  divRef = React.createRef<HTMLDivElement>();\n  editor: EditorJS | null = null;\n\n  componentDidMount() {\n    this.update();\n  }\n\n  componentDidUpdate() {\n    this.update();\n  }\n\n  update() {\n    if (!this.divRef.current) {\n      return;\n    }\n    if (this.editor) {\n      this.editor.destroy();\n    }\n    this.editor = new EditorJS({\n      holder: this.divRef.current,\n      tools: {\n        header: {\n          class: Header,\n          inlineToolbar: false\n        },\n        list: {\n          class: List,\n          inlineToolbar: true\n        },\n        paragraph: {\n          class: Paragraph,\n          inlineToolbar: true\n        },\n        simpleImage: {\n          class: SimpleImage,\n          inlineToolbar: false\n        }\n      },\n      data: {\n        time: 1574268130135,\n        blocks: [\n          {\n            type: \"simpleImage\",\n            data: {\n              url: \"cover.png\",\n              caption: \"\",\n              withBorder: false,\n              withBackground: false,\n              stretched: true\n            }\n          },\n          {\n            type: \"header\",\n            data: {\n              text: \"meet.js Gdańsk #26 – NOWE MIEJSCE\",\n              level: 1\n            }\n          },\n          {\n            type: \"paragraph\",\n            data: {\n              text: \"Hej, hej! meet.js Gdańsk powraca w wielkim stylu!\"\n            }\n          },\n          {\n            type: \"paragraph\",\n            data: {\n              text: \"Tradycyjnie, zapraszamy na 3 prezentacje!\"\n            }\n          },\n          {\n            type: \"header\",\n            data: {\n              text: \"Sponsorzy\",\n              level: 2\n            }\n          },\n          {\n            type: \"paragraph\",\n            data: {\n              text: \"Bardzo dziękujemy naszym sponsorom!\"\n            }\n          },\n          {\n            type: \"list\",\n            data: {\n              style: \"unordered\",\n              items: [\n                '<a target=\"_blank\" href=\"https://www.facebook.com/jit.team.poland/\">Jit Team</a> i <a target=\"_blank\" href=\"https://www.facebook.com/neoteric.eu/\">Neoteric</a> za sponsorowanie napojów i przekąsek.',\n                '<a target=\"_blank\" href=\"https://www.facebook.com/Polufka/\">Pub Polufka</a> za wspieranie nas :)',\n                '<a target=\"_blank\" href=\"https://www.facebook.com/C200OfficeGdansk/\">C200 Office</a> za ugoszczenie w swojej świetnej sali!<br>'\n              ]\n            }\n          },\n          {\n            type: \"header\",\n            data: {\n              text: \"Agenda\",\n              level: 2\n            }\n          },\n          {\n            type: \"list\",\n            data: {\n              style: \"ordered\",\n              items: [\n                \"18:00-18:20 <b>Łukasz Rybka</b> — Co nowego w npm?\",\n                \"18:30-18:50 <b>Tomek Fiechowski</b> — React Context vs Redux<br>\",\n                \"19:00-19:20 <b>Aleksander Wielgórski</b> — Napiszmy Blockchain w JS-ie<br>\",\n                \"19:20-23:00 Networking<br>\"\n              ]\n            }\n          },\n          {\n            type: \"header\",\n            data: {\n              text: \"Wystąp na meet.js!\",\n              level: 2\n            }\n          },\n          {\n            type: \"paragraph\",\n            data: {\n              text:\n                \"Jeśli chcesz wystąpić, albo Twoja firma chciałaby sponsorować meet.js — napisz do organizatorów!\"\n            }\n          }\n        ],\n        version: \"2.15.1\"\n      }\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div ref={this.divRef} />\n        <button\n          onClick={() => {\n            this.editor && this.editor.save().then(console.log);\n          }}\n        >\n          Save\n        </button>\n      </React.Fragment>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ReactEditor />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}